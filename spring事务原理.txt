spring事务的本质就是数据库对事务的支持，主要是用来保证数据操作的一致性。

数据库
用户表
系统表：数据库的登录用户、数据库权限、索引的存储规则

原子性，一致性，隔离性，持久性

==============================================
当我们往表中插入一条记录的时候，记录插入之前是不会直接操作表的，每张表会对应一张临时表，
这是放在内存中的虚拟表。如果sql中出现update/delete/insert关键字，会把涉及到的记录放到临时表
中，只存放要操作的数据。
临时表是事务的内部机制。

t_memeber
-----------------------------
id	name
1	tom
2	james
3	mic
4	sam
------------------------------

插入操作
insert into t_member values(5,feifei)   
临时表				t_member
------------------------------		--------------
id	name
5	feifei                         
------------------------------     ---try--->   ---------------    ---没有问题---->返回影响行数，删除临时表中本次数据

insert into t_member values(5,feifei)   
临时表				t_member
------------------------------		--------------
id	name
5	feifei                         
------------------------------     ---try--->   ---------------    ---主键冲突---->错误信息，临时表删除本次数据

这么设计不是为了效率高，反而会减低效率，只是为了让用户可以后悔！不仅仅是放在内存中，有可能会日志。
查询的时候是没有临时表的。

临时表是单例。

删除操作
delete from t_member where id=1
先执行一次查询，把该条数据放到临时表中，然后锁住该条记录，尝试删除原始表中的记录，如果出现错误，
原来的数据原封不动，清空临时表本次数据，如果执行成功，就真正干掉原始表中的记录返回影响行数。
临时表				t_member
------------------------------		--------------
id	name			id	name
1	tom   			1	tom    锁住
				.....                  
------------------------------     ---try--->   ---------------    

增删改都是对应一个临时表，如果是表级锁，还会在临时表中记录表状态
做增删改的时候都会做一次查询，如果没有where就是全表扫描。
回滚事务，是从临时表中恢复。
=======================================================

